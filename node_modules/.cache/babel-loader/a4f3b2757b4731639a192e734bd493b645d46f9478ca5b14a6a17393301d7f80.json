{"ast":null,"code":"var _jsxFileName = \"/Users/nemanjacf/vekla/src/pages/MySkills/MySkills.js\";\nimport React from 'react';\nimport './MySkills.css'; // Make sure to link this CSS file for styles\nimport { Doughnut } from 'react-chartjs-2'; // Import Doughnut chart\nimport Chart from 'chart.js/auto'; // Import Chart.js\n\n// Plugin to add number in the center of the donut chart and shadow effect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst centerTextPlugin = filledSegments => ({\n  id: 'centerTextPlugin',\n  beforeDraw: chart => {\n    const {\n      ctx,\n      chartArea: {\n        width,\n        height\n      }\n    } = chart;\n\n    // Draw shadow effect around the chart\n    ctx.save();\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.10)'; // Slightly lighter shadow color\n    ctx.shadowBlur = 10; // Reduced blur for the shadow\n    ctx.shadowOffsetX = 2; // Horizontal shadow offset\n    ctx.shadowOffsetY = 2; // Vertical shadow offset\n\n    // Draw each segment with the shadow\n    chart.getDatasetMeta(0).data.forEach(segment => {\n      segment.draw(ctx);\n    });\n    ctx.restore();\n\n    // Draw number in the center of the donut chart\n    ctx.font = '30px Lexend Deca'; // Set the font size to 30px\n    ctx.fillStyle = '#000'; // Text color\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    const text = `${filledSegments}`; // Number of colored segments\n    ctx.fillText(text, width / 2, height / 2 + 5); // Adjust position of the text to be centered\n  }\n});\nconst MySkills = () => {\n  // Define data and number of filled segments for each donut chart\n  const charts = [{\n    data: [6, 4],\n    filled: 6,\n    backgroundColor: ['#FDECD8', '#ddd']\n  },\n  // 6 colored segments\n  {\n    data: [8, 2],\n    filled: 8,\n    backgroundColor: ['#97DDA8', '#ddd']\n  },\n  // 8 colored segments\n  {\n    data: [5, 5],\n    filled: 5,\n    backgroundColor: ['#F6A3B6', '#ddd']\n  },\n  // 5 colored segments\n  {\n    data: [9, 1],\n    filled: 9,\n    backgroundColor: ['#97DDA8', '#ddd']\n  },\n  // 9 colored segments\n  {\n    data: [3, 7],\n    filled: 3,\n    backgroundColor: ['#F6A3B6', '#ddd']\n  },\n  // 3 colored segments\n  {\n    data: [7, 3],\n    filled: 7,\n    backgroundColor: ['#97DDA8', '#ddd']\n  } // 7 colored segments\n  ];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"skills-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skills-text1\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Role:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Account Executive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skills-text2\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Level:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Intermediate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), charts.map((chart, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `box-card${index + 1}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: {\n            labels: [],\n            // Empty labels\n            datasets: [{\n              data: chart.data,\n              backgroundColor: chart.backgroundColor,\n              borderColor: ['white'],\n              borderWidth: 4\n            }]\n          },\n          plugins: [centerTextPlugin(chart.filled)] // Pass the filled number dynamically\n          ,\n          options: {\n            cutout: '65%',\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  boxWidth: 20,\n                  padding: 20,\n                  font: {\n                    size: 14\n                  }\n                },\n                padding: {\n                  right: 100\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 Copyrights Protected by Vekla\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_c = MySkills;\nexport default MySkills;\nvar _c;\n$RefreshReg$(_c, \"MySkills\");","map":{"version":3,"names":["React","Doughnut","Chart","jsxDEV","_jsxDEV","centerTextPlugin","filledSegments","id","beforeDraw","chart","ctx","chartArea","width","height","save","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","getDatasetMeta","data","forEach","segment","draw","restore","font","fillStyle","textAlign","textBaseline","text","fillText","MySkills","charts","filled","backgroundColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","labels","datasets","borderColor","borderWidth","plugins","options","cutout","legend","position","boxWidth","padding","size","right","_c","$RefreshReg$"],"sources":["/Users/nemanjacf/vekla/src/pages/MySkills/MySkills.js"],"sourcesContent":["import React from 'react';\nimport './MySkills.css'; // Make sure to link this CSS file for styles\nimport { Doughnut } from 'react-chartjs-2'; // Import Doughnut chart\nimport Chart from 'chart.js/auto'; // Import Chart.js\n\n// Plugin to add number in the center of the donut chart and shadow effect\nconst centerTextPlugin = (filledSegments) => ({\n  id: 'centerTextPlugin',\n  beforeDraw: (chart) => {\n    const { ctx, chartArea: { width, height } } = chart;\n\n    // Draw shadow effect around the chart\n    ctx.save();\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.10)'; // Slightly lighter shadow color\n    ctx.shadowBlur = 10; // Reduced blur for the shadow\n    ctx.shadowOffsetX = 2; // Horizontal shadow offset\n    ctx.shadowOffsetY = 2; // Vertical shadow offset\n\n    // Draw each segment with the shadow\n    chart.getDatasetMeta(0).data.forEach((segment) => {\n      segment.draw(ctx);\n    });\n\n    ctx.restore();\n\n    // Draw number in the center of the donut chart\n    ctx.font = '30px Lexend Deca'; // Set the font size to 30px\n    ctx.fillStyle = '#000'; // Text color\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    const text = `${filledSegments}`; // Number of colored segments\n    ctx.fillText(text, width / 2, height / 2 + 5); // Adjust position of the text to be centered\n  }\n});\n\nconst MySkills = () => {\n  // Define data and number of filled segments for each donut chart\n  const charts = [\n    { data: [6, 4], filled: 6, backgroundColor: ['#FDECD8', '#ddd'] }, // 6 colored segments\n    { data: [8, 2], filled: 8, backgroundColor: ['#97DDA8', '#ddd'] }, // 8 colored segments\n    { data: [5, 5], filled: 5, backgroundColor: ['#F6A3B6', '#ddd'] }, // 5 colored segments\n    { data: [9, 1], filled: 9, backgroundColor: ['#97DDA8', '#ddd'] }, // 9 colored segments\n    { data: [3, 7], filled: 3, backgroundColor: ['#F6A3B6', '#ddd'] }, // 3 colored segments\n    { data: [7, 3], filled: 7, backgroundColor: ['#97DDA8', '#ddd'] }  // 7 colored segments\n  ];\n\n  return (\n    <div className=\"skills-container\">\n      <div className=\"skills-text1\">\n        <h2>Role:</h2>\n        <p>Account Executive</p>\n      </div>\n      <div className=\"skills-text2\">\n        <h2>Level:</h2>\n        <p>Intermediate</p>\n      </div>\n      \n      {/* Map through each chart to generate the corresponding card */}\n      {charts.map((chart, index) => (\n        <div key={index} className={`box-card${index + 1}`}>\n          <h3></h3>\n          <div className=\"chart-container\">\n            <Doughnut\n              data={{\n                labels: [], // Empty labels\n                datasets: [\n                  {\n                    data: chart.data,\n                    backgroundColor: chart.backgroundColor,\n                    borderColor: ['white'],\n                    borderWidth: 4\n                  }\n                ]\n              }}\n              plugins={[centerTextPlugin(chart.filled)]} // Pass the filled number dynamically\n              options={{\n                cutout: '65%',\n                plugins: {\n                  legend: {\n                    position: 'right',\n                    labels: {\n                      boxWidth: 20,\n                      padding: 20,\n                      font: {\n                        size: 14\n                      }\n                    },\n                    padding: {\n                      right: 100\n                    }\n                  }\n                }\n              }}\n            />\n          </div>\n        </div>\n      ))}\n      \n      <footer className=\"footer\">\n        <p>© Copyrights Protected by Vekla</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default MySkills;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}